# returns interesting gadgets

import argparse

from ropgadget.core import Core  # pip3 install ropgadget


def parse(arguments):
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument("-v", "--version", action="store_true", help="Display the ROPgadget's version")
    parser.add_argument("-c", "--checkUpdate", action="store_true", help="Checks if a new version is available")
    parser.add_argument("--binary", type=str, metavar="<binary>", help="Specify a binary filename to analyze")
    parser.add_argument("--opcode", type=str, metavar="<opcodes>", help="Search opcode in executable segment")
    parser.add_argument("--string", type=str, metavar="<string>", help="Search string in readable segment")
    parser.add_argument("--memstr", type=str, metavar="<string>", help="Search each byte in all readable segment")
    parser.add_argument("--depth", type=int, metavar="<nbyte>", default=10,
                        help="Depth for search engine (default 10)")
    parser.add_argument("--only", type=str, metavar="<key>", help="Only show specific instructions")
    parser.add_argument("--filter", type=str, metavar="<key>", help="Suppress specific mnemonics")
    parser.add_argument("--range", type=str, metavar="<start-end>", default="0x0-0x0",
                        help="Search between two addresses (0x...-0x...)")
    parser.add_argument("--badbytes", type=str, metavar="<byte>",
                        help="Rejects specific bytes in the gadget's address")
    parser.add_argument("--rawArch", type=str, metavar="<arch>", help="Specify an arch for a raw file")
    parser.add_argument("--rawMode", type=str, metavar="<mode>", help="Specify a mode for a raw file")
    parser.add_argument("--rawEndian", type=str, metavar="<endian>", help="Specify an endianness for a raw file")
    parser.add_argument("--re", type=str, metavar="<re>", help="Regular expression")
    parser.add_argument("--offset", type=str, metavar="<hexaddr>", help="Specify an offset for gadget addresses")
    parser.add_argument("--ropchain", action="store_true", help="Enable the ROP chain generation")
    parser.add_argument("--thumb", action="store_true", help="Use the thumb mode for the search engine (ARM only)")
    parser.add_argument("--console", action="store_true", help="Use an interactive console for search engine")
    parser.add_argument("--norop", action="store_true", help="Disable ROP search engine")
    parser.add_argument("--nojop", action="store_true", help="Disable JOP search engine")
    parser.add_argument("--callPreceded", action="store_true", help="Only show gadgets which are call-preceded")
    parser.add_argument("--nosys", action="store_true", help="Disable SYS search engine")
    parser.add_argument("--multibr", action="store_true", help="Enable multiple branch gadgets")
    parser.add_argument("--all", action="store_true", help="Disables the removal of duplicate gadgets")
    parser.add_argument("--noinstr", action="store_true", help="Disable the gadget instructions console printing")
    parser.add_argument("--dump", action="store_true", help="Outputs the gadget bytes")
    parser.add_argument("--silent", action="store_true", help="Disables printing of gadgets during analysis")

    args = parser.parse_args(arguments)

    return args


class ROPgadgets(object):

    def __init__(self, binary):
        arguments = ["--binary", binary, "--silent", "--multibr"]
        args = parse(arguments)
        core = Core(args)
        core.analyze()
        self.gadgets = core.gadgets()
        # print(self.gadgets)

    def get_gadgets(self):
        for gadget in self.gadgets:
            print(gadget['gadget'])

    def get_gadget(self, instruction):
        for gadget in self.gadgets:
            if gadget['gadget'] == instruction:
                return gadget['vaddr']
        return 0


def test():
    rop = ROPgadgets("vuln3-32-test")
    # rop.get_gadgets()
    assert (134672011 == rop.get_gadget("pop edx ; ret"))


test()
